<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="//feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="//feed.xml" rel="self" type="application/atom+xml" /><link href="//" rel="alternate" type="text/html" /><updated>2021-03-11T14:10:09-07:00</updated><id>//</id><title type="html">Jacob West-Roberts</title><subtitle>Moon is a minimal, one column jekyll theme for your blog.</subtitle><entry><title type="html">Week 8 Walkthrough- ORF Prediction and Basic Annotation</title><link href="//Week_8_Walkthrough/" rel="alternate" type="text/html" title="Week 8 Walkthrough- ORF Prediction and Basic Annotation" /><published>2021-03-04T00:00:00-07:00</published><updated>2021-03-04T00:00:00-07:00</updated><id>//Week_8_Walkthrough</id><content type="html" xml:base="//Week_8_Walkthrough/">&lt;p&gt;``&lt;/p&gt;
&lt;h1&gt;Hello and welcome to week 8 of ESPM 112L-&lt;/h1&gt;

&lt;h1&gt;Metagenomic Data Analysis Lab!&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#goals-for-today&quot; id=&quot;markdown-toc-goals-for-today&quot;&gt;Goals for today:&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#tools-to-investigate-proteins-of-interest&quot; id=&quot;markdown-toc-tools-to-investigate-proteins-of-interest&quot;&gt;Tools to investigate proteins of interest:&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#predicting-orfs-with-ncbi-orf-finder&quot; id=&quot;markdown-toc-predicting-orfs-with-ncbi-orf-finder&quot;&gt;Predicting ORFs with NCBI ORF Finder&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#selecting-a-dna-sequence-on-which-to-predict-proteins&quot; id=&quot;markdown-toc-selecting-a-dna-sequence-on-which-to-predict-proteins&quot;&gt;Selecting a DNA sequence on which to predict proteins&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#performing-prediction-on-ncbi-orf-finder&quot; id=&quot;markdown-toc-performing-prediction-on-ncbi-orf-finder&quot;&gt;Performing prediction on NCBI ORF Finder&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#verifying-proteins-with-blastp&quot; id=&quot;markdown-toc-verifying-proteins-with-blastp&quot;&gt;Verifying proteins with BLASTp&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#interpro&quot; id=&quot;markdown-toc-interpro&quot;&gt;Interpro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This week’s lab is going to cover both how proteins are predicted in prokaryotes as well as how to go about learning more about interesting proteins you find in metagenomic data. Today we’re going to focus exclusively on proteins you can find in your bins, since those are more interesting (because you know a bit about which organism they came from).&lt;/p&gt;

&lt;p&gt;In our lab, we use several popular tools to look at interesting proteins, which each have their own advantages and disadvantages. Let’s talk about them, and what they’re each good at.&lt;/p&gt;

&lt;h1 id=&quot;goals-for-today&quot;&gt;Goals for today:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Predict genes, ORFs using NCBI ORF Finder&lt;/li&gt;
  &lt;li&gt;Learn how to use BLASTp to investigate protein sequences&lt;/li&gt;
  &lt;li&gt;Learn how to use and interpret results from Interpro and HMMscan&lt;/li&gt;
  &lt;li&gt;Start playing with KEGG and investigating the metabolic pathways your proteins are part of&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;tools-to-investigate-proteins-of-interest&quot;&gt;Tools to investigate proteins of interest:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Interproscan (most thorough)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ebi.ac.uk/interpro/search/sequence/&quot;&gt;https://www.ebi.ac.uk/interpro/search/sequence/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This option is the best if you have a protein that’s really unusual and you want to find out exactly what it is. Interproscan uses a large suite of HMMs (probabilistic models that we won’t go over in detail today) to give you a wealth of information about the protein sequence you provide.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Blastp (alignment-based)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://blast.ncbi.nlm.nih.gov/Blast.cgi?PAGE=Proteins&quot;&gt;https://blast.ncbi.nlm.nih.gov/Blast.cgi?PAGE=Proteins&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BLASTp draws on the strength of the NCBI’s public sequence database, as well as a great list of structural models that help you see the domain-level features of your protein sequence, which can tell you a lot about its function.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HMMscan (HMM-based, very fast)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ebi.ac.uk/Tools/hmmer/search/hmmscan&quot;&gt;https://www.ebi.ac.uk/Tools/hmmer/search/hmmscan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HMMscan allows you to search against a suite of domain-level HMMs, which can tell you a lot about what your protein does, and how it functions. Its companion program, pHMMer, gives you similar results along with a list of similar sequences from the EMBL-EBI’s public database, although this approach yields many fewer hits than running BLASTp and I would recommend using BLAST instead of pHMMer unless you’re pressed for time. It’s really fast, though, and if you’re doing tons of these searches, as I often am in the course of my research, it can be a real time saver.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;predicting-orfs-with-ncbi-orf-finder&quot;&gt;Predicting ORFs with NCBI ORF Finder&lt;/h1&gt;

&lt;h2 id=&quot;selecting-a-dna-sequence-on-which-to-predict-proteins&quot;&gt;Selecting a DNA sequence on which to predict proteins&lt;/h2&gt;

&lt;p&gt;Go ahead and go over to &lt;a href=&quot;class.ggkbase.berkeley.edu&quot;&gt;class.ggkbase.berkeley.edu&lt;/a&gt; and log in. Select one of your organisms, and click on it to get a list of the scaffolds in that bin. Select a relatively large scaffold (more than ~20kbp) and click on it. A good way to do this is to sort the sequences by ‘# features’ and find a scaffold with more than 10 genes.&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/get_big_scaffold.png” width=250&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;performing-prediction-on-ncbi-orf-finder&quot;&gt;Performing prediction on NCBI ORF Finder&lt;/h2&gt;

&lt;p&gt;Click on the link to this contig and download the DNA sequence for this contig.  Open the fasta file in a plain text editor; select all (cmd+a on Mac or ctrl+a on Windows/Linux), and copy the sequence.  Go to NCBI ORF finder (&lt;a href=&quot;https://www.ncbi.nlm.nih.gov/orffinder&quot;&gt;https://www.ncbi.nlm.nih.gov/orffinder&lt;/a&gt;) and paste the sequence into the Query box.&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/paste_in_sequence.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;You will want to use the standard bacterial genetic code, referred to here as “Bacterial, Archaeal, and Plant Plasmid (11)”.  A reasonable minimum ORF length is 300, but feel free to try other cutoffs.  Hit the submit button to see your potential ORFs.&lt;/p&gt;

&lt;p&gt;The results show all of the possible genes in all reading frames.  You can click on a gene in the viewer or in the list to get its particular sequence. Note: this is ALL of the possibilities across multiple reading frames, some of the resulting proteins are likely not real proteins.&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/orf_finder.png” width=250&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;verifying-proteins-with-blastp&quot;&gt;Verifying proteins with BLASTp&lt;/h2&gt;

&lt;p&gt;BLASTp is a piece of software that will take a protein sequence and search a database for close hits- think a search engine, but for biological sequence data.&lt;/p&gt;

&lt;p&gt;Verify that your selected protein is real by clicking on it, like in the image below, scrolling down to the bottom left of the page and selecting “BLAST”. If your results show a bunch of other proteins with high sequence identity and defined function, congratulations! You got a nice protein. Keep working with it. Otherwise, find another one, rinse and repeat. The best candidates will have relatively little overlap with other predicted ORFs. All the standard parameters are just fine, so don’t worry about changing anything once you see the page shown in the image below- just scroll down and click BLAST.&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/blastp.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;How well do the results cover your query?  Look at the colored bars in the top box to visualize this.  Do you get results in the description box that agree on what this protein might be?  Do the results have a functional annotation (some kind of specific protein) or does it simply say “hypothetical protein” or “unknown”?&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;interpro&quot;&gt;Interpro&lt;/h1&gt;

&lt;p&gt;Now that you have a good ORF that you can trust is real, go ahead and navigate over to Interproscan (&lt;a href=&quot;https://www.ebi.ac.uk/interpro/search/sequence/&quot;&gt;https://www.ebi.ac.uk/interpro/search/sequence/&lt;/a&gt;). Paste this amino acid sequence in as your query and wait for a little while - interpro takes a bit of time, but the results are really good and trustworthy.&lt;/p&gt;

&lt;p&gt;You’ll get some cool results from interpro which are really interactive and highly detailed, if you have a real protein. If you have a protein with unknown function or that doesn’t look like any well-characterized proteins, you might not. In that case, just go back to NCBI ORF finder and pick another protein and repeat this whole process. (If you’ve closed the window with NCBI ORF finder or just don’t like it, you can always get these proteins from class.ggkbase pretty easily too.)&lt;/p&gt;

&lt;p&gt;Below is a run down of the kinds of information interpro will display for you:&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/F.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Protein family: in InterPro a protein family is a group of proteins that share a common evolutionary origin, reflected by their related functions and similarities in sequence or structure.  (The inclusion of protein structure is one of the differences between the general search in NCBI, that only considered sequence homology, and this search against InterPro)&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/D.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Protein domain: distinct functional and/or structural units in a protein.  Usually they are responsible for particular functions or interaction, contributing to the overall role of a protein.  Domains may exist in a variety of biological contexts, where similar domains can be found in proteins with different functions.&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/R.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Repeats are typically short amino acid sequences that are repeated within a protein, and may confer binding or structural properties upon it.&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/S.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Sites: groups of amino acids that confer certain characteristics upon a protein, and may be important for its overall function.  Sites are usually rather small (only a few amino acids long).  Some types of sites in InterPro are active sites (involved in catalytic activity, binding sites (bind molecules or ions), post-translational modification sites (chemically modified after the protein is translated), and conserved sites (found in specific types of proteins, but whose function is unknown)&lt;/p&gt;</content><category term="test" /><summary type="html">ORF Prediction!</summary></entry><entry><title type="html">Week 7 Walkthrough- Dereplication and Genome Comparison</title><link href="//Week_7_Walkthrough/" rel="alternate" type="text/html" title="Week 7 Walkthrough- Dereplication and Genome Comparison" /><published>2021-03-04T00:00:00-07:00</published><updated>2021-03-04T00:00:00-07:00</updated><id>//Week_7_Walkthrough</id><content type="html" xml:base="//Week_7_Walkthrough/">&lt;p&gt;``&lt;/p&gt;
&lt;h1&gt;Hello and welcome to week 7 of ESPM 112L-&lt;/h1&gt;

&lt;h1&gt;Metagenomic Data Analysis Lab!&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-run-drep-for-your-reference&quot; id=&quot;markdown-toc-how-to-run-drep-for-your-reference&quot;&gt;How to run dRep (for your reference)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#analyzing-drep-output&quot; id=&quot;markdown-toc-analyzing-drep-output&quot;&gt;Analyzing dRep output&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#downloading-and-viewing-drep-output&quot; id=&quot;markdown-toc-downloading-and-viewing-drep-output&quot;&gt;Downloading and viewing dRep output&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-ani-clustering-to-make-a-dereplicated-bin-set&quot; id=&quot;markdown-toc-using-ani-clustering-to-make-a-dereplicated-bin-set&quot;&gt;Using ANI clustering to make a dereplicated bin set&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comparing-synteny-between-bins-with-at-least-99-ani&quot; id=&quot;markdown-toc-comparing-synteny-between-bins-with-at-least-99-ani&quot;&gt;Comparing synteny between bins with at least 99% ANI&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#important-note-about-file-names&quot; id=&quot;markdown-toc-important-note-about-file-names&quot;&gt;Important note about file names&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#running-orthologer&quot; id=&quot;markdown-toc-running-orthologer&quot;&gt;Running orthologer&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#todays-turn-in&quot; id=&quot;markdown-toc-todays-turn-in&quot;&gt;Today’s turn-in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This week we’re going to be looking at methods of dereplication of metagenomic bins. We often sequence environments that contain lots of very similar microorganisms (E. faecalis, anyone?) and it becomes less than desirable to spend time and effort analyzing a bunch of extremely closely related genomes instead of looking at the general population.&lt;/p&gt;

&lt;p&gt;For this and other reasons, which I’ll discuss in much more detail in today’s lecture/demo video, we use a program called dRep &lt;img src=&quot;https://github.com/MrOlm/drep&quot; alt=&quot;https://github.com/MrOlm/drep&quot; /&gt; designed by the inimitable Dr. Matt Olm, a former ESPM 112L GSI and Ph.D. student in the Banfield lab.&lt;/p&gt;

&lt;p&gt;Today’s lab primarily involves analyzing the output of dRep and interpreting it; this can help give you an idea of which closely-related organisms are present in multiple samples across your dataset.&lt;/p&gt;

&lt;p&gt;First, let’s go over dRep, how I ran it, and how you can run it (on your own time if you so desire, not during the lab period please!).&lt;/p&gt;

&lt;p&gt;dRep is a program that utilizes genome wide average nucleotide identity (ANI) to group bins into clusters based on how similar they are. In this way, we can figure out which organisms are present across multiple samples because the bin from each sample will fall into the same ANI cluster.&lt;/p&gt;

&lt;p&gt;If you want to run dRep on your own, the documentation is here: &lt;img src=&quot;https://readthedocs.org/projects/drep/&quot; alt=&quot;https://readthedocs.org/projects/drep/&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;how-to-run-drep-for-your-reference&quot;&gt;How to run dRep (for your reference)&lt;/h1&gt;

&lt;p&gt;dRep uses DNA-DNA comparisons to find very closely related genomes in your dataset. This is performed using MASH, a fast alignment algorithm that gives approximate (i.e. not entirely perfect) comparisons between two genome-size chunks of DNA in a reasonable period of time. This is a really hard task, and takes a very long time if you do it exactly!&lt;/p&gt;

&lt;p&gt;What you’re going to see today are clustering results; this is done by taking the similarities between genomes and clustering them into highly related groups. First, “primary” clusters are formed out of loosely related organisms, then more stringent comparisons are done among these smaller clusters.&lt;/p&gt;

&lt;p&gt;The secondary clusters use a different algorithm, gANI, to perform similarity comparisons- this gives more accurate values, and is only feasible when run on a small number of genomes.&lt;/p&gt;

&lt;p&gt;dRep is run using genome fasta files containing DNA (not protein) data. You call the program by saying &lt;code class=&quot;highlighter-rouge&quot;&gt;dRep dereplicate&lt;/code&gt;, provide an output directory name (I call it &lt;code class=&quot;highlighter-rouge&quot;&gt;dRep_output&lt;/code&gt;), and a folder full of genomes (&lt;code class=&quot;highlighter-rouge&quot;&gt;-g all_contigs/*.fasta&lt;/code&gt;). In this case I put all the bins for all samples in a single folder and ran dRep on that.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt; flag refers to the number of threads you’re using- be careful not to use too many if you’re running this on your local machine. If you’re running it on the cluster, 24 is the maximum number available, and remember not to use those all at once if others are using the cluster too.&lt;/p&gt;

&lt;p&gt;Here’s the final command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dRep dereplicate dRep_output -g all_contigs/*.fasta -p 24
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;analyzing-drep-output&quot;&gt;Analyzing dRep output&lt;/h1&gt;

&lt;p&gt;Now you can go in and look at what dRep has generated after comparing all of the bins from all 9 of our samples. Go ahead and navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;/class_data/dRep_output&lt;/code&gt; and take a look. The &lt;code class=&quot;highlighter-rouge&quot;&gt;dereplicated_genomes/&lt;/code&gt; folder contains the genomes dRep has chosen as representatives- i.e. the best genome for each group. The &lt;code class=&quot;highlighter-rouge&quot;&gt;figures/&lt;/code&gt; folder has all the pictures you’ll need to look at in the following section. Remember, to download any of these pictures, here’s what to do:&lt;/p&gt;

&lt;h2 id=&quot;downloading-and-viewing-drep-output&quot;&gt;Downloading and viewing dRep output&lt;/h2&gt;

&lt;p&gt;Download the files &lt;code class=&quot;highlighter-rouge&quot;&gt;Primary_clustering_dendrogram.pdf&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Secondary_clustering_dendrograms.pdf&lt;/code&gt;. Let’s take a look at them.&lt;/p&gt;

&lt;p&gt;The primary clustering dendrogram is a clustering of the bins based off of MASH. It should look something like the following and have every bin from every sample in a single dendrogram:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/mash_primary_clustering.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;The secondary clustering dendrogram is the ANI clustering performed on each of the identified MASH clusters. This file should contain quite a few different dendrograms, each relating to a different MASH cluster and should look something like the following for a single cluster:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/second_dendrogram.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;We generally consider bins that share 99% or greater ANI to be from very closely related organisms (i.e. same species). In the above secondary clustering example, all of those bins would be considered to be from the same set of closely related organisms. In the below example, there are bins from two different organisms present:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/third_dendrogram.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;If you don’t understand why there are two groups in this clustering please ask me. This is an important concept to understand. The important part is being able to read a dendrogram- the vertical line at 99% ANI indicates a dividing line between the two groups (on top, the Lentimicrobium group and on bottom, the Bacteroidetes group).&lt;/p&gt;

&lt;h1 id=&quot;using-ani-clustering-to-make-a-dereplicated-bin-set&quot;&gt;Using ANI clustering to make a dereplicated bin set&lt;/h1&gt;

&lt;p&gt;This secondary clustering file is what we will use to create a dereplicated bin set across all 17 samples. We will consider bins that share 99% or greater ANI to be from the same organism type. With that in mind, all we need to do to make our dereplicated bin set is pick one bin from each cluster of bins that share &amp;gt;99% ANI to be that clusters representative bin.&lt;/p&gt;

&lt;p&gt;We want the representative bins to be high quality, so pick the best bin by looking at each in ggKbase and picking the bin with the best single copy gene profile. If there are ties, pick one arbitrarily.&lt;/p&gt;

&lt;p&gt;This dereplicated bin set will be useful for future analyses, but we will not be using it for the rest of this week’s assignment.&lt;/p&gt;

&lt;h1 id=&quot;comparing-synteny-between-bins-with-at-least-99-ani&quot;&gt;Comparing synteny between bins with at least 99% ANI&lt;/h1&gt;

&lt;p&gt;Synteny is the shared order of genes among two or more organisms - essentially, a syntenic block is a group of genes in the same arrangement in multiple organisms. &lt;code class=&quot;highlighter-rouge&quot;&gt;Orthologer&lt;/code&gt; is a program that takes two ordered lists of &lt;strong&gt;protein sequences&lt;/strong&gt;, compares them to each other, and displays genes in the first organism that are reciprocal BLAST best hits in the other. While this program can accept multiple genomes as an input, I recommend only two genomes at a time.&lt;/p&gt;

&lt;p&gt;Look at your file &lt;code class=&quot;highlighter-rouge&quot;&gt;Secondary_clustering_dendrograms.pdf&lt;/code&gt;. Each cluster has a separate dendrogram- choose one containing a genome from your sample- we are going to analyze two genomes from this cluster in the following section of this lab. (All the file names start with the sample the bin was obtained from!)&lt;/p&gt;

&lt;h2 id=&quot;important-note-about-file-names&quot;&gt;Important note about file names&lt;/h2&gt;

&lt;p&gt;I forgot to rename the protein fastas from &lt;code class=&quot;highlighter-rouge&quot;&gt;.fasta&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;.faa&lt;/code&gt; before running dRep, so the clustering dendrograms are going to have file names that end in &lt;code class=&quot;highlighter-rouge&quot;&gt;.fasta&lt;/code&gt;. I’ve since named them to prevent confusion: The DNA sequence files are in &lt;code class=&quot;highlighter-rouge&quot;&gt;/class_data/sample_bins/all_contigs/&lt;/code&gt; and end in &lt;code class=&quot;highlighter-rouge&quot;&gt;.fna&lt;/code&gt;; the protein/AA sequence files are in &lt;code class=&quot;highlighter-rouge&quot;&gt;/class_data/sample_bins/all_proteins/&lt;/code&gt; and end in &lt;code class=&quot;highlighter-rouge&quot;&gt;.faa&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;running-orthologer&quot;&gt;Running orthologer&lt;/h2&gt;

&lt;p&gt;Choose two genomes that are in this same primary cluster. Now, get the &lt;em&gt;protein&lt;/em&gt; fasta files for those bins from the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;/class_data/sample_bins/all_proteins/&lt;/code&gt; and copy them into your home directory.&lt;/p&gt;

&lt;p&gt;I like to make directories before I run analyses, so let’s make one in our home directory (&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir ~/orthologer&lt;/code&gt;) and copy these bins into it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir ~/orthologer

cp /class_data/sample_bins/all_proteins/[YOUR FIRST CHOSEN BIN] ~/orthologer/
cp /class_data/sample_bins/all_proteins/[YOUR SECOND CHOSEN BIN] ~/orthologer/

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you’ve got those two (&lt;strong&gt;protein&lt;/strong&gt;) fasta files in your &lt;code class=&quot;highlighter-rouge&quot;&gt;orthologer&lt;/code&gt; directory, let’s go ahead and run &lt;code class=&quot;highlighter-rouge&quot;&gt;orthologer.py&lt;/code&gt; to compare them. You’re going to have to use my installation of python, which is why I have those huge paths down below- just roll with it.&lt;/p&gt;

&lt;p&gt;Now take your two protein fastas (should end in &lt;code class=&quot;highlighter-rouge&quot;&gt;.faa&lt;/code&gt;), which we’ll call &lt;code class=&quot;highlighter-rouge&quot;&gt;[FASTA1]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;[FASTA2]&lt;/code&gt;, and do the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/orthologer
/home/jwestrob/.pyenv/shims/python /home/jwestrob/bin/bioscripts/ctbBio/orthologer.py reference [FASTA1] [FASTA2] &amp;gt; genome_comparison.tsv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you have a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;genome_comparison.tsv&lt;/code&gt; that you can download and open up in excel/google sheets. Give it a look- see how large the syntenic blocks are that these two genomes share. Remember, you can look up gene names in ggkbase and see what they do. (I will give a quick demo on this at the beginning of class.)&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;todays-turn-in&quot;&gt;Today’s turn-in&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Can you find any operons that these two genomes share? (From your orthologer output) What genes are encoded in these operons?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the taxonomy of the two genomes you chose?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Can you find any particularly large clusters in the primary clustering dendrogram? (&lt;code class=&quot;highlighter-rouge&quot;&gt;Primary_clustering_dendrogram.pdf&lt;/code&gt;)Give the name of at least one bin from this cluster and look up its taxonomy on ggkbase.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><category term="test" /><summary type="html">dRep!</summary></entry><entry><title type="html">Week 6 Walkthrough- Phylogenetic Tree Building</title><link href="//Week_6_Walkthrough/" rel="alternate" type="text/html" title="Week 6 Walkthrough- Phylogenetic Tree Building" /><published>2021-03-01T00:00:00-07:00</published><updated>2021-03-01T00:00:00-07:00</updated><id>//Week_6_Walkthrough</id><content type="html" xml:base="//Week_6_Walkthrough/">&lt;p&gt;``&lt;/p&gt;
&lt;h1&gt;Hello and welcome to week 6 of ESPM 112L-&lt;/h1&gt;

&lt;h1&gt;Metagenomic Data Analysis Lab!&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#whats-required-to-perform-phylogenetic-analysis&quot; id=&quot;markdown-toc-whats-required-to-perform-phylogenetic-analysis&quot;&gt;What’s required to perform phylogenetic analysis?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-software-will-we-be-using-to-get-this-info&quot; id=&quot;markdown-toc-what-software-will-we-be-using-to-get-this-info&quot;&gt;What software will we be using to get this info?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-your-sequences&quot; id=&quot;markdown-toc-getting-your-sequences&quot;&gt;Getting your sequences&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#aligning-your-sequences&quot; id=&quot;markdown-toc-aligning-your-sequences&quot;&gt;Aligning your sequences&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#cat&quot; id=&quot;markdown-toc-cat&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#visualizing-your-alignment-local-system&quot; id=&quot;markdown-toc-visualizing-your-alignment-local-system&quot;&gt;Visualizing your alignment (local system)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-a-phylogenetic-tree-back-on-the-cluster&quot; id=&quot;markdown-toc-creating-a-phylogenetic-tree-back-on-the-cluster&quot;&gt;Creating a phylogenetic tree (back on the cluster)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#visualizing-your-tree&quot; id=&quot;markdown-toc-visualizing-your-tree&quot;&gt;Visualizing your tree&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#uploading-your-tree-to-itol&quot; id=&quot;markdown-toc-uploading-your-tree-to-itol&quot;&gt;Uploading your tree to iTOL&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#interpreting-your-trees&quot; id=&quot;markdown-toc-interpreting-your-trees&quot;&gt;Interpreting your trees&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#finding-cool-stuff-in-your-tree&quot; id=&quot;markdown-toc-finding-cool-stuff-in-your-tree&quot;&gt;Finding cool stuff in your tree&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This week we’re going to be going over some material that’s very near and dear to my heart… phylogenetics!&lt;/p&gt;

&lt;p&gt;A lot of microbial ecology research revolves around phylogenetic analysis, especially my own. So what is it, exactly?&lt;/p&gt;

&lt;p&gt;Phylogenetics is basically the process by which we estimate relationships between organisms. In the case of today’s lab, we’ll be using it to measure the relationships between bacteria in your baby gut samples.&lt;/p&gt;

&lt;h3 id=&quot;whats-required-to-perform-phylogenetic-analysis&quot;&gt;What’s required to perform phylogenetic analysis?&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- A sequence set (DNA or protein)
- A multiple sequence alignment program
- An alignment (made by using the two previously mentioned items)
- Phylogenetic tree estimation software (FastTree, iQ-TREE, RAxML, etc)
- Phylogenetic tree visualization software (iTOL, FigTree, etc)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;what-software-will-we-be-using-to-get-this-info&quot;&gt;What software will we be using to get this info?&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Sequence set: ggKbase
- Multiple sequence alignment: Mafft and FAMSA (both on the cluster)
  - Mafft: https://mafft.cbrc.jp/alignment/software/
  - FAMSA: https://github.com/refresh-bio/FAMSA (Wicked fast!)
- Alignment viewer: Aliview (https://ormbunkar.se/aliview/)
- Tree building: FastTree (on cluster)
- Tree visualization: iTOL (http://itol.embl.de)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;getting-your-sequences&quot;&gt;Getting your sequences&lt;/h1&gt;

&lt;p&gt;Log in to class.ggkbase.berkeley.edu on your browser, navigate to your baby’s project page, and click “Genome Completeness -&amp;gt; Ribosomal Proteins” near the top of the page. You’ll see a menu that looks like this:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/ggkbase_rps3.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Click “Protein” and a file will be generated and downloaded to your computer. Now you’re going to want to put that file on the cluster with cyberduck or scp.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;aligning-your-sequences&quot;&gt;Aligning your sequences&lt;/h1&gt;

&lt;p&gt;Now log in to class.ggkbase.berkeley.edu on the terminal. Again, make sure you’ve put your sequence file you’ve downloaded from ggKbase onto the class server!&lt;/p&gt;

&lt;p&gt;We’ve got a bunch of reference sequences for you to include on your phylogenetic tree; what we’re going to do is combine the rps3 file for your sample with this reference file. This is done by concatenating, using the command &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;cat&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; command is very useful, and good to be familiar with. &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; literally means &lt;code class=&quot;highlighter-rouge&quot;&gt;concatenate&lt;/code&gt;; it’s meant to stick one or more files together into a single, bigger file, which is just what you’re going to be doing with it.&lt;/p&gt;

&lt;p&gt;However, it’s important to point out that &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; also prints the entire text of a file to terminal. Not always ideal- most of the time you’d rather use &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; to view just the first 5 lines of a file (or &lt;code class=&quot;highlighter-rouge&quot;&gt;tail&lt;/code&gt; to view the last 5). However, you can use this in combination with other bash commands to perform more complex tasks, so it’s good to know going forward.&lt;/p&gt;

&lt;p&gt;Here’s how to concatenate your rps3 file with our reference:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; #This creates a file called 'rps3_wRef.faa' by combining your ggKbase rps3 file and the reference Bacteroidetes.faa
cat [YOUR RPS3 FILENAME] /class_data/Bacteroidetes.faa &amp;gt; rps3_wRef.faa
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Mafft is a popular aligner renowned for its accuracy and thoroughness when creating alignments. It takes a while, though, since it was written with accuracy in mind. Try aligning your sequences with &lt;code class=&quot;highlighter-rouge&quot;&gt;mafft&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mafft --localpair --maxiterate 1000 --reorder --thread 4 rps3_wRef.faa &amp;gt; rps3_wRef.mafft.mfaa&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This alignment should take around 4-5 minutes; if it runs longer, don’t be too concerned.&lt;/p&gt;

&lt;p&gt;Remember to choose a name for your alignment and to end that filename with &lt;code class=&quot;highlighter-rouge&quot;&gt;.fna&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.mfna&lt;/code&gt;. I prefer to use &lt;code class=&quot;highlighter-rouge&quot;&gt;.mfna&lt;/code&gt; because that means (to me) that it’s a multiple sequence alignment (&lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; for multiple) of nucleotide sequences (&lt;code class=&quot;highlighter-rouge&quot;&gt;fna&lt;/code&gt; for &lt;strong&gt;f&lt;/strong&gt;asta &lt;strong&gt;a&lt;/strong&gt;mino &lt;strong&gt;a&lt;/strong&gt;cid). Just makes things easier later. A protein multiple sequence alignment, for example, would be &lt;code class=&quot;highlighter-rouge&quot;&gt;.mfaa&lt;/code&gt;. It makes it easier to identify what’s in your files, since a FASTA file can be DNA, RNA or protein!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;visualizing-your-alignment-local-system&quot;&gt;Visualizing your alignment (local system)&lt;/h1&gt;

&lt;p&gt;On your local computer, install Aliview, which we’ll be using to view your alignment: https://ormbunkar.se/aliview/&lt;/p&gt;

&lt;p&gt;Now use cyberduck or SCP to download your multiple sequence alignment to your computer. Open Aliview, and use it to open this multiple sequence alignment file. What do you see? Are there regions of conservation? Is it particularly gappy? This is just to give you an idea of what your data looks like and what you’re actually working with.&lt;/p&gt;

&lt;p&gt;You may want to delete partial sequences- i.e. rows that are comprised primarily of gaps- before building your tree.&lt;/p&gt;

&lt;p&gt;It’s common practice to trim your alignment before building a phylogenetic tree- that is, to remove columns from your alignment that consist primarily of gaps. This often helps to construct more reliable and robust trees, but the best way to do this is subject of debate within the field. It’s also quite common to trim specifically at the beginning and end of the alignment.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;creating-a-phylogenetic-tree-back-on-the-cluster&quot;&gt;Creating a phylogenetic tree (back on the cluster)&lt;/h1&gt;

&lt;p&gt;Now that you’re back on the cluster, make a folder to do your tree analysis in. Phylogenetic tree building software gets a little messy sometimes and we don’t want to get confused about what files go where. It’s good to keep your home directory tidy.&lt;/p&gt;

&lt;p&gt;Make a directory for this analysis (with &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir&lt;/code&gt;) and move (&lt;code class=&quot;highlighter-rouge&quot;&gt;mv&lt;/code&gt;) your DNA alignment into this folder. Now navigate in there (&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;You’re going to be using FastTree as your tree building software today- here’s an example command.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fasttree rps3_wRef.mafft.mfaa &amp;gt; rps3_wRef.mafft.mfaa.treefile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This should be very fast- less than a minute.&lt;/p&gt;

&lt;p&gt;Now remember, when you use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;, you’re creating a new file! So the above command is creating a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;rps3_wRef.mafft.mfaa.treefile&lt;/code&gt;. (You can name that file whatever you want, by the way, I just want to be consistent for the  purposes of the tutorial.)&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;visualizing-your-tree&quot;&gt;Visualizing your tree&lt;/h1&gt;

&lt;p&gt;One of the best ways to visualize trees is with a website called iTOL. This site has recently moved to a subscription service, so you don’t get all the functionality with a free account, but it’s perfectly sufficient for our purposes today. You’re going to make an account, upload your tree, and send it to me as part of your turnin today.&lt;/p&gt;

&lt;h2 id=&quot;uploading-your-tree-to-itol&quot;&gt;Uploading your tree to iTOL&lt;/h2&gt;

&lt;p&gt;First, download your treefile to your local computer using cyberduck/SCP. Then, go to &lt;img src=&quot;https://itol.embl.de/&quot; alt=&quot;iTOL&quot; /&gt; and click ‘Register’ at the top right of the page to create an account.&lt;/p&gt;

&lt;p&gt;Once you’ve created an account, log in; this will take you to a page containing two buttons, “Paste tree text” and “Upload tree files”. Click “Upload tree files” and upload the tree file you just downloaded from the class server.&lt;/p&gt;

&lt;h2 id=&quot;interpreting-your-trees&quot;&gt;Interpreting your trees&lt;/h2&gt;

&lt;p&gt;For those of you not in the lecture, we’ve talked a lot about trees, and so if you don’t have experience interpreting these, you might be at somewhat of a disadvantage- call me over at this step if you’d like to learn more about what’s going on here.&lt;/p&gt;

&lt;p&gt;I will do a live demo of this in lab, and come around for help, since this might be the tricky portion of today’s lab.&lt;/p&gt;

&lt;p&gt;First, now that you’ve uploaded your tree file, click on the link and go view it. You should see a circular representation, with a bunch of impossible-to-read small text- don’t worry about that just yet.&lt;/p&gt;

&lt;p&gt;There’s a box at the upper right of the page that looks like this:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=’/assets/img/itol_box.png’ width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Select “Unrooted” (as in the example above) and the tree should look like this:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=’/assets/img/itol_unrooted.png’ width=250&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;finding-cool-stuff-in-your-tree&quot;&gt;Finding cool stuff in your tree&lt;/h2&gt;

&lt;p&gt;Find a branch that particularly interests you- I pick from clades with the longest branches, because long branches indicate highly divergent sequences. The vast majority of your sequences will be from bacteria, which shouldn’t surprise you- but there’s more than just bacteria in here.&lt;/p&gt;

&lt;p&gt;Click on the branch you’d like to investigate, or the text label for that branch (call me over if you have trouble with this), and click the blue text at the bottom of the resulting window, like so:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=’/assets/img/itol_copy.png’ width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;As an example, the branch I copied looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scaffold_383062_77|metabat_scaffolds2bin_tsv_074|JS_HB1_S134
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But we just want the part before the first &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; character, i.e.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scaffold_383062_77
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Go back to class.ggkbase.berkeley.edu, and in the top left search bar, paste that sequence ID…. what’s the taxonomy for that protein? Go to the contig- is it in a bin?&lt;/p&gt;

&lt;p&gt;See if you can find an archaeon among one of your longest branches. There are archaea in gut microbiomes- they’re just not abundant!&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;Today’s turnin:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Send me the URL for your tree.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Search at least three proteins on ggkbase using the method I described above using scaffold_383062_77 as an example and send me the taxonomy for each one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How many columns are in your alignment? (Open it in aliview on your local machine and scroll all the way to the right!)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><category term="test" /><summary type="html">Phylogenetics!</summary></entry><entry><title type="html">Week 5 Walkthrough- Automatic Binning</title><link href="//Week_5_Walkthrough/" rel="alternate" type="text/html" title="Week 5 Walkthrough- Automatic Binning" /><published>2021-02-12T00:00:00-07:00</published><updated>2021-02-12T00:00:00-07:00</updated><id>//Week_5_Walkthrough</id><content type="html" xml:base="//Week_5_Walkthrough/">&lt;p&gt;``&lt;/p&gt;
&lt;h1&gt;Hello and welcome to week 5 of ESPM 112L-&lt;/h1&gt;

&lt;h1&gt;Metagenomic Data Analysis Lab!&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#automatic-binning&quot; id=&quot;markdown-toc-automatic-binning&quot;&gt;Automatic binning&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bin-consolidation&quot; id=&quot;markdown-toc-bin-consolidation&quot;&gt;Bin consolidation&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#your-binning-results&quot; id=&quot;markdown-toc-your-binning-results&quot;&gt;Your binning results&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#das_tool&quot; id=&quot;markdown-toc-das_tool&quot;&gt;DAS_Tool&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#making-an-output-directory&quot; id=&quot;markdown-toc-making-an-output-directory&quot;&gt;Making an output directory&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#input&quot; id=&quot;markdown-toc-input&quot;&gt;Input&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#important-explainer&quot; id=&quot;markdown-toc-important-explainer&quot;&gt;Important: Explainer&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#input-1&quot; id=&quot;markdown-toc-input-1&quot;&gt;Input&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#output&quot; id=&quot;markdown-toc-output&quot;&gt;Output&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-final-dastool-command&quot; id=&quot;markdown-toc-the-final-dastool-command&quot;&gt;The Final Dastool Command&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#interpreting-das-tool&quot; id=&quot;markdown-toc-interpreting-das-tool&quot;&gt;Interpreting DAS Tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#uploading-your-bins-to-ggkbase&quot; id=&quot;markdown-toc-uploading-your-bins-to-ggkbase&quot;&gt;Uploading your bins to ggKbase&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#todays-turn-in&quot; id=&quot;markdown-toc-todays-turn-in&quot;&gt;Today’s Turn-In&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;automatic-binning&quot;&gt;Automatic binning&lt;/h2&gt;

&lt;p&gt;The objective of automatic binning (often shortened to autobinning) is the same as the process you used last week to separate out genome bins from a metagenomic assembly, just done computationally rather than manually. It’s very convenient- if you have a bunch of samples. Manual binning is very time consuming and sometimes not effective. Automatic binning has some caveats, though, since a human isn’t there to proofread and curate the binning result. That’s your job!&lt;/p&gt;

&lt;p&gt;This week, I’ve run one automatic binning program for you - Metabat (https://peerj.com/articles/1165/) and MaxBin2 (https://pubmed.ncbi.nlm.nih.gov/26515820/). Your task today is going to be to use the results from these binning algorithms, as well as the results from your manual binning last week, to make a consolidated bin set using DASTool.&lt;/p&gt;

&lt;h2 id=&quot;bin-consolidation&quot;&gt;Bin consolidation&lt;/h2&gt;

&lt;p&gt;Different binning approaches use different features to separate out genomes. Your manual ggkbase binning, for example, used GC content, coverage and taxonomy; most of these autobinners will use coverage and &lt;em&gt;k&lt;/em&gt;-mer composition (essentially a way to turn a DNA string into a numeric vector for computers to interpret).&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”https://media.springernature.com/full/springer-static/image/art%3A10.1038%2Fs41564-018-0171-1/MediaObjects/41564_2018_171_Fig1_HTML.jpg?as=webp” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;But not every autobinner is the same- they differ in algorithms and the features they look at. As a result, binners will give results of varying quality on individual datasets. Take a look at how three binners (CONCOCT, MaxBin2, and Metabat2) perform on the same dataset, and then what bins look like after consolidation with DASTool:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41564-018-0171-1/MediaObjects/41564_2018_171_Fig2_HTML.jpg?as=webp” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;You can see that the consolidated bins are overall of much higher quality than the bins generated by any individual binning method shown. And that’s what we’re going to do today!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;your-binning-results&quot;&gt;Your binning results&lt;/h1&gt;

&lt;p&gt;In the interest of time, and because of computational constraints, I’ve run two binners (again, MaxBin2 and Metabat) for you. DASTool takes as input a file called a &lt;code class=&quot;highlighter-rouge&quot;&gt;scaffolds2bin&lt;/code&gt; file; this is a file that shows which scaffold belongs to which bin. Each binner has different contig assignments- they make different decisions on which bins the contigs should be placed in- and so we generate a &lt;code class=&quot;highlighter-rouge&quot;&gt;scaffolds2bin&lt;/code&gt; file for each binner.&lt;/p&gt;

&lt;p&gt;In the directory for your sample (&lt;code class=&quot;highlighter-rouge&quot;&gt;/class_data/assemblies/[YOUR SAMPLE NAME HERE]&lt;/code&gt;) there should be a folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;binning&lt;/code&gt;. Navigate there, and you’ll see four important files: your contigs file, a &lt;code class=&quot;highlighter-rouge&quot;&gt;scaffolds2bin.tsv&lt;/code&gt; file for &lt;code class=&quot;highlighter-rouge&quot;&gt;Metabat&lt;/code&gt;, a &lt;code class=&quot;highlighter-rouge&quot;&gt;scaffolds2bin.tsv&lt;/code&gt; file for &lt;code class=&quot;highlighter-rouge&quot;&gt;MaxBin2&lt;/code&gt;, and a &lt;code class=&quot;highlighter-rouge&quot;&gt;scaffolds2bin.txt&lt;/code&gt; file from ggKbase (with the results from your binning last week).&lt;/p&gt;

&lt;p&gt;Here’s the directory for the example assembly, &lt;code class=&quot;highlighter-rouge&quot;&gt;JS_HF3_S142&lt;/code&gt;, to demonstrate:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[INSERT LS OUTPUT HERE]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now what you need to do is use this information to run &lt;code class=&quot;highlighter-rouge&quot;&gt;DAS_Tool&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;das_tool&quot;&gt;DAS_Tool&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DAS_Tool&lt;/code&gt; is, like all software you’ll use in lab, already installed on the class server. Open the help menu by running &lt;code class=&quot;highlighter-rouge&quot;&gt;DAS_Tool -h&lt;/code&gt;, and take a look at the options. (Remember, if you’re ever running software on the command line and you’re confused about how to use it, try running that command with &lt;code class=&quot;highlighter-rouge&quot;&gt;-h&lt;/code&gt;; almost all the time, it’ll show a help menu. Sometimes you need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt; or something similar, but that’s down to the individual program.)&lt;/p&gt;

&lt;h2 id=&quot;making-an-output-directory&quot;&gt;Making an output directory&lt;/h2&gt;

&lt;p&gt;But remember, you can’t write to folders within the &lt;code class=&quot;highlighter-rouge&quot;&gt;class_data&lt;/code&gt; folder, so you need to include an output flag that specifies to output in your home directory. Remember, we refer to that with &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;; if you’re student20, &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; means &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/student20&lt;/code&gt;. For me, &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; means &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/jwestrob&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, make a folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;DAS_Tool&lt;/code&gt; in your home directory, like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir ~/Das_Tool
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;input&quot;&gt;Input&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;important-explainer&quot;&gt;Important: Explainer&lt;/h3&gt;

&lt;p&gt;The following subsections show how to structure individual &lt;em&gt;pieces&lt;/em&gt; of the DAS_Tool command. Scroll down to the section labeled “The Final Dastool Command” to see how they’re strung together.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As you can see from the help menu, &lt;code class=&quot;highlighter-rouge&quot;&gt;DAS_Tool&lt;/code&gt; needs two main inputs: &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt;, a comma-separated list of &lt;code class=&quot;highlighter-rouge&quot;&gt;scaffolds2bin&lt;/code&gt; files, and &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt;, the contigs file to create your bins from. Here’s an example of the list you need to make-&lt;/p&gt;

&lt;p&gt;Navigate (cd) to your sample directory (&lt;code class=&quot;highlighter-rouge&quot;&gt;/class_data/assemblies/[sample_id]&lt;/code&gt;) which will contain the following files:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MetaBat.scaffolds2bin.tsv
ggKbase.scaffolds2bin.tsv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;First thing we’re going to do is copy these over to your directory. Try the following commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#Navigate to your sample directory
cd /class_data/assemblies/[sample_id]

#Make a folder in your home directory to put the files in
mkdir ~/DAS_Tool

#Copy the right files to your new directory
cp *scaffold_min1000.fa *.tsv ~/DAS_Tool

#Navigate to that folder
cd ~/DAS_Tool
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Great! Now that you have all your files set up, let’s go take a look at all the individual parts of the command.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;input-1&quot;&gt;Input&lt;/h2&gt;

&lt;p&gt;Your new directory (&lt;code class=&quot;highlighter-rouge&quot;&gt;~/DAS_Tool&lt;/code&gt;) should look something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;JS_HA1_S131_scaffold_min1000.fa   maxbin.scaffolds2bin.tsv
JS_HA1_S131.scaffolds_to_bin.tsv  metabat.scaffolds2bin.tsv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You have one fasta format file here (&lt;code class=&quot;highlighter-rouge&quot;&gt;JS_HA1_S131_scaffold_min1000.fa&lt;/code&gt;) containing your DNA from your assembly, and three &lt;code class=&quot;highlighter-rouge&quot;&gt;scaffolds2bin.tsv&lt;/code&gt; files containing the information on which scaffolds belong to which bins.&lt;/p&gt;

&lt;p&gt;The fasta file you will provide to DAS_Tool with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; flag, and the scaffolds2bin files you will provide together, as a comma-separated list, with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;Now, given these three &lt;code class=&quot;highlighter-rouge&quot;&gt;scaffolds2bin.tsv&lt;/code&gt; files, you would provide the following as &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;DAS_Tool&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-i metabat.scaffolds2bin.tsv,ggKbase.scaffolds_to_bin.tsv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And for our contigs file, we provide the path:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-c JS_HF3_S142_scaffold.fa
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Remember, you should have copied this fasta file (as well as the scaffolds2bin files) over to a folder in your home directory &lt;code class=&quot;highlighter-rouge&quot;&gt;~/DAS_Tool&lt;/code&gt;, which is where you should be running the command. If you get issues saying that DAS_Tool can’t find your scaffolds file, try using &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; to make sure you’re in the same directory as that file, and that it’s spelled correctly in your command!&lt;/p&gt;

&lt;h2 id=&quot;output&quot;&gt;Output&lt;/h2&gt;

&lt;p&gt;You should be running this in a folder in your home directory (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;~/DAS_Tool&lt;/code&gt; or similar). Make sure you’ve navigated to that directory with &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; before running.
Now specify the prefix of your output. All the files DAS_Tool makes will start with this prefix; name it whatever you want, just don’t name it something that will confuse you later!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-o DAS_Tool
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-final-dastool-command&quot;&gt;The Final Dastool Command&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /class_data/assemblies/JS_HF3_S142/

#Remember to make a new directory to run DAS_Tool
mkdir ~/DAS_Tool
cp *scaffold_min1000.fa *.tsv ~/DAS_Tool

#Navigate there and run the command
cd ~/DAS_Tool
DAS_Tool -i maxbin2.scaffolds2bin.tsv,metabat.scaffolds2bin.tsv,JS_HF3_S142_scaffolds2bin.tsv -c JS_HF3_S142_scaffold_min1000.fa -o DAS_Tool
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;interpreting-das-tool&quot;&gt;Interpreting DAS Tool&lt;/h1&gt;

&lt;p&gt;In that output directory, &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Das_Tool&lt;/code&gt;, you’re going to see a bunch of files, but only two are important for your purposes. Here’s an example of what you’ll see:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LC_0.1_DAS_DASTool_hqBins.pdf              LC_0.1_DAS_proteins.faa
LC_0.1_DAS_DASTool.log                     LC_0.1_DAS_proteins.faa.archaea.scg
LC_0.1_DAS_DASTool_scaffolds2bin.txt       LC_0.1_DAS_proteins.faa.bacteria.scg
LC_0.1_DAS_DASTool_scores.pdf              LC_0.1_DAS.seqlength
LC_0.1_DAS_DASTool_summary.txt             LC_0.1_DAS_vamb.scaffolds2bin.tsv.eval
LC_0.1_DAS_metabat.scaffolds2bin.tsv.eval
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You want the files ending in &lt;code class=&quot;highlighter-rouge&quot;&gt;DASTool_scores.pdf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DASTool_hqBins.pdf&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;DASTool_scaffolds2bin.txt&lt;/code&gt;. We’re going to use the first to examine how well your binners worked, and the second to upload the new bins to ggKbase.&lt;/p&gt;

&lt;p&gt;Download those files (using cyberduck or your favorite alternative), and open up the &lt;code class=&quot;highlighter-rouge&quot;&gt;DASTool_hqBins.pdf&lt;/code&gt; file to take a look. You’ll see something like this:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/dastool_hqbins.png” width=500&amp;gt;&lt;/p&gt;

&lt;p&gt;which shows the number of bins each binner generated, as well as how complete these genomes are estimated to be.&lt;/p&gt;

&lt;p&gt;Now take a look at the file ending in &lt;code class=&quot;highlighter-rouge&quot;&gt;DASTool_scores.pdf&lt;/code&gt;, and you’ll see something like this:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/dastool_scores.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Notice how DASTool tends to consolidate and eliminate the lower-quality bins, and has a much higher quality score cutoff than the other binners. Most binning software doesn’t even take completeness into account, which is why you tend to see binning results that yield numerous low-quality bins.&lt;/p&gt;

&lt;p&gt;Now let’s take your shiny new set of bins and upload them to ggKbase.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;uploading-your-bins-to-ggkbase&quot;&gt;Uploading your bins to ggKbase&lt;/h1&gt;

&lt;p&gt;Go to class.ggkbase.berkeley.edu and go ahead and log in. Head over to your project page and select ‘View Organisms’, as you did last week. Up at the top right corner, you’ll see a blue wrench icon that says ‘Batch Rebinning’; click on it and select ‘Rebin File’.&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/rebin_file.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Now, select ‘Add file’, upload that file, and press ‘Upload and Rebin’. Wait a moment, and all your new DASTool bins will be ready for you to peruse!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;todays-turn-in&quot;&gt;Today’s Turn-In&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What is the highest coverage bin in your sample?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the taxonomy of that organism?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How do the genomes generated by manual binning on ggkbase compare to the automatically generated bins in terms of quality? How about the DAS_Tool generated bins?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><category term="test" /><summary type="html">Automatic binning!</summary></entry><entry><title type="html">Week 4 Walkthrough- Manual Binning</title><link href="//Week_4_Walkthrough/" rel="alternate" type="text/html" title="Week 4 Walkthrough- Manual Binning" /><published>2021-02-12T00:00:00-07:00</published><updated>2021-02-12T00:00:00-07:00</updated><id>//Week_4_Walkthrough</id><content type="html" xml:base="//Week_4_Walkthrough/">&lt;p&gt;``&lt;/p&gt;
&lt;h1&gt;Hello and welcome to week 4 of ESPM 112L-&lt;/h1&gt;

&lt;h1&gt;Metagenomic Data Analysis Lab!&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-binning&quot; id=&quot;markdown-toc-what-is-binning&quot;&gt;What is binning?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ggkbase&quot; id=&quot;markdown-toc-ggkbase&quot;&gt;ggKbase&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#navigating-ggkbase&quot; id=&quot;markdown-toc-navigating-ggkbase&quot;&gt;Navigating ggKbase&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#binning&quot; id=&quot;markdown-toc-binning&quot;&gt;Binning&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#feature-types&quot; id=&quot;markdown-toc-feature-types&quot;&gt;Feature types&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#taxonomy&quot; id=&quot;markdown-toc-taxonomy&quot;&gt;Taxonomy&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#gc-content&quot; id=&quot;markdown-toc-gc-content&quot;&gt;GC Content&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#coverage&quot; id=&quot;markdown-toc-coverage&quot;&gt;Coverage&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#finalizing-a-bin&quot; id=&quot;markdown-toc-finalizing-a-bin&quot;&gt;Finalizing a Bin&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#intepreting-ggkbase-annotation-data&quot; id=&quot;markdown-toc-intepreting-ggkbase-annotation-data&quot;&gt;Intepreting ggKbase annotation data&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bonus-viruses-and-bacteriophage&quot; id=&quot;markdown-toc-bonus-viruses-and-bacteriophage&quot;&gt;Bonus: Viruses and Bacteriophage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#todays-turn-in&quot; id=&quot;markdown-toc-todays-turn-in&quot;&gt;Today’s Turn-In&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This week’s lab is one of the most fun of the semester- you all are going to get to do some manual binning with our lab’s tool, ggKbase!&lt;/p&gt;

&lt;p&gt;ggKbase is a spectacular way to visualize the ways we separate out genomes from metagenomes, and unlike automatic binning software, you can see and control the whole process!&lt;/p&gt;

&lt;p&gt;Similar platforms like Anvi’o (https://merenlab.org/software/anvio/) are available for manual binning, although slightly different from what you’ll be using today.&lt;/p&gt;

&lt;h1 id=&quot;what-is-binning&quot;&gt;What is binning?&lt;/h1&gt;

&lt;p&gt;Remember, we start with a whole community of microorganisms, so we have DNA from multiple origin genomes.&lt;/p&gt;

&lt;p&gt;The assembler, as you’ll recall from last week, does a pretty good job of piecing these things together, but we’re still left with fragments of these original genomes.&lt;/p&gt;

&lt;p&gt;Binning is the process of choosing which of these fragments likely originated from the same genome, and stitching them together into genome bins (sometimes called MAGs, or Metagenome-Assembled Genomes, in the literature).&lt;/p&gt;

&lt;p&gt;Each group will be binning their own sample this week, and this document will show you how.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;ggkbase&quot;&gt;ggKbase&lt;/h1&gt;

&lt;p&gt;ggKbase is our lab’s platform for metagenomic data analysis. Head on over to https://class.ggkbase.berkeley.edu; we’re going to make each of you an account.&lt;/p&gt;

&lt;p&gt;When you get to the homepage, go to the top right and click “Create an account”. (Ctrl+F if you can’t find it.) Here’s what you should see:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/ggkbase_create_account.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Please sign up with your first initial and your last name so I can find you, since I need to give you each access to your sample individually (and I need to find your name!).&lt;/p&gt;

&lt;p&gt;In the meantime, let’s go over binning principles.&lt;/p&gt;

&lt;h2 id=&quot;navigating-ggkbase&quot;&gt;Navigating ggKbase&lt;/h2&gt;

&lt;p&gt;I’m going to start with an example project and show you how to bin it; we’ll have a demo also during class from Jill, who’s the absolute expert on manual binning with ggKbase- pay close attention to how she does it!&lt;/p&gt;

&lt;p&gt;Let’s start by going to the Projects page, which you can access with the button on the top left (ctrl+F “projects” if you can’t find it) - you probably won’t see anything until I give you access to your team’s sample. Here’s what I see (I have access to all the projects as the class instructor):&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/Horse_Projects.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Let’s select our example project - this sample isn’t assigned to any team, so don’t get confused and try to find it! None of you will have access to this one.&lt;/p&gt;

&lt;h1 id=&quot;binning&quot;&gt;Binning&lt;/h1&gt;

&lt;p&gt;Once you click on the name of the sample, you’ll see this page:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/HF3_S142_UNKpage.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Click “Bin organism” to get started.&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/ggkbase_all_features.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Binning involves using all of this information to separate out genomes; here’s what all of these features mean.&lt;/p&gt;

&lt;h2 id=&quot;feature-types&quot;&gt;Feature types&lt;/h2&gt;

&lt;p&gt;There are three features to select from when binning: Taxonomy, GC content, and coverage.&lt;/p&gt;

&lt;p&gt;There are three more boxes on the right-hand side, too:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ribosomal proteins (you want one copy of as many as you can get; duplicates are bad but not the end of the world)&lt;/li&gt;
  &lt;li&gt;Bacterial single-copy genes (SCGs)- as the name implies, you also want one copy of as many as you can get.&lt;/li&gt;
  &lt;li&gt;Archaeal SCGs - You won’t find many of these in your samples, but if you were looking for Archaea, you’d treat them the same as bacterial SCGs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you get an ideal bin, the taxonomy wheel should show a consistent color and you should have one copy of (most of) the ribosomal proteins and bacterial SCGs.&lt;/p&gt;

&lt;h3 id=&quot;taxonomy&quot;&gt;Taxonomy&lt;/h3&gt;

&lt;p&gt;The Taxonomy wheel in this case displays the “consensus taxonomy” of a contig. It looks like this:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/taxonomywheel.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;From the innermost ring, each ring represents, in order, Domain, Phylum, Class, Order, Family, Genus and Species. Each group is color-coded for easy navigation- as you get more used to it, you’ll start finding this scheme very convenient to visualize who’s living in your sample.&lt;/p&gt;

&lt;p&gt;Essentially, we search every protein sequence against a huge database, and label each protein with the taxonomic ID of the best hit in the database. So if we searched, say, a DNA Polymerase subunit against our database and it came back with its best hit as an &lt;em&gt;E. coli&lt;/em&gt;, that protein would be labeled&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bacteria -&amp;gt; Proteobacteria -&amp;gt; Gammaproteobacteria -&amp;gt; Enterobacterales -&amp;gt; Enterobacteraceae -&amp;gt; Escherichia -&amp;gt; Escherichia coli
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When we say a ‘contig’ (here we use the term interchangeably with ‘scaffold’) has a certain taxonomy, that means more than 50% of the proteins on that contig share taxonomy at that level. For example, if the rest of the contigs on our imaginary example contigs only had hits from other &lt;code class=&quot;highlighter-rouge&quot;&gt;Enterobacterales&lt;/code&gt; but not from &lt;code class=&quot;highlighter-rouge&quot;&gt;Enterobacteraceae&lt;/code&gt; or lower divisions, the contig would show up as &lt;code class=&quot;highlighter-rouge&quot;&gt;Enterobacterales&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can use this wheel to select contigs that share taxonomic affiliation. Try clicking around to see what’s going on; remember there’s a grey ‘reset’ button that will remove your selection and take you back.&lt;/p&gt;

&lt;h3 id=&quot;gc-content&quot;&gt;GC Content&lt;/h3&gt;

&lt;p&gt;GC Content is one of the best ways to separate genomes from a sample. Here’s what it should look like before you do anything:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”//assets/img/gc_content.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Now, when you make a selection in other feature types (like coverage or taxonomy) you’ll see the distribution change here; in this example I’ve selected all the contigs with a coverage value between 60 and 80.&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/gc_content_spike.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Notice how the GC content now has a spike at around 47 and another at ~55? See also how the taxonomy wheel has changed; how it’s mostly beige (the phylum Bacteroidetes) with a little bit of green (Firmicutes).&lt;/p&gt;

&lt;p&gt;Let’s try selecting that second GC content spike and see what happens:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/firmicutes_gc.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Would you look at that! See how there’s one copy of all those ribosomal proteins and single-copy genes? That’s an indicator of a pretty good genome. This is a pretty good summary of what you need to do&lt;/p&gt;

&lt;h3 id=&quot;coverage&quot;&gt;Coverage&lt;/h3&gt;

&lt;p&gt;Coverage, remember, is how many reads align to each position (on average) across a contig/scaffold. For organisms that were more abundant in the original community, we generally observe higher coverage for their genomes- it’s a good way to tell what the composition is of your community/sample.&lt;/p&gt;

&lt;p&gt;It’s also a great way to separate bins out!&lt;/p&gt;

&lt;p&gt;Here’s what the coverage bar looks like:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/coverage_notzoomed.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;You’ll notice it’s pretty hard to see any pattern that might correspond to an individual genome, since most contigs have pretty low coverage. (That’s normal!) To get around this, we use the lower of the two bars to zoom in, like so:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/coverage_zoomed.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Now you can make more refined selections on the upper bar- look for spikes, similar to what we did with the GC content example above.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;finalizing-a-bin&quot;&gt;Finalizing a Bin&lt;/h2&gt;

&lt;p&gt;Once you’ve got a good bin selected, we’re going to want to finalize the bin. Go to the lower right-hand corner where it says “Manipulate selected contigs”, and fill out the bin name (if it doesn’t fill automatically), then press “Create a new bin”. Here’s what it looks like:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/Manipulate_Contigs.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Then go back, reset your selection criteria, and repeat until you can’t find any more good bins! (Or until you’re satisfied!)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;intepreting-ggkbase-annotation-data&quot;&gt;Intepreting ggKbase annotation data&lt;/h2&gt;

&lt;p&gt;Let’s look at one of our scaffolds. On your binning page, scroll down until you see a table with scaffolds, coverage, GC content, and length. You might want to order the scaffolds by length, which you can do by clicking the two little arrows right next to ‘DNA length’, like so:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/contiglength.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Now click on one of your contigs, and let’s see what we have going on. Here’s the longest contig in the example bin I made in the GC content section:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”/assets/img/Long_Contig.png” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;Now you can see some important info for this contig:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It’s from a &lt;em&gt;Clostridiales&lt;/em&gt; bacterium in the phylum &lt;em&gt;Firmicutes&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;It’s 52,778 bp long. (Not very long in the grand scheme of things!)&lt;/li&gt;
  &lt;li&gt;It’s at ~70x coverage- that means on average, 70 reads align to any given position on this contig. That’s quite good- it’s also why this genome was so easy to pull out.&lt;/li&gt;
  &lt;li&gt;You can scroll down and see the annotations for the individual proteins- look in your bins to see if you can find anything interesting!&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;bonus-viruses-and-bacteriophage&quot;&gt;Bonus: Viruses and Bacteriophage&lt;/h1&gt;

&lt;p&gt;Now these aren’t the organisms you’re necessarily looking for today, but you will probably find a couple of them as you go through your data. The way we spot phages is by looking for a couple types of key features in the annotations (so you’re going to have to look at the contigs to find this info):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Structural proteins - they’re often annotated as capsid, tail, or head proteins. These form the protein shell- the capsid- of a bacteriophage.&lt;/li&gt;
  &lt;li&gt;Transposon-like proteins- these are proteins that allow for genetic regions to lift up and out of a genome, then integrate somewhere else. You’ll see keywords like “Transposable element” or “integrase”. Obviously pretty important if you’re a virus and you want your DNA to integrate into your host’s genome as a prophage!&lt;/li&gt;
  &lt;li&gt;Lots and lots of hypothetical proteins, and proteins with no informative annotation. Viral proteins evolve very quickly, and it’s difficult to tell what they’re doing based on sequence data alone a lot of the time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;todays-turn-in&quot;&gt;Today’s Turn-In&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create at least five bins for your sample. Send me the taxonomy of the longest contig for each.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How many scaffolds are there with a coverage above 200 and below 300 in your sample?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the most abundant bacterial phylum in your sample? How many bins did you recover from that phylum?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Optional- Find a phage!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><category term="test" /><summary type="html">ggKbase binning!</summary></entry><entry><title type="html">Week 3 Walkthrough- Metagenomic Assembly</title><link href="//Week_3_Walkthrough/" rel="alternate" type="text/html" title="Week 3 Walkthrough- Metagenomic Assembly" /><published>2021-02-03T00:00:00-07:00</published><updated>2021-02-03T00:00:00-07:00</updated><id>//Week_3_Walkthrough</id><content type="html" xml:base="//Week_3_Walkthrough/">&lt;h1&gt;Hello and welcome to week 3 of ESPM 112L-&lt;/h1&gt;

&lt;h1&gt;Metagenomic Data Analysis Lab!&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#assembly-methods&quot; id=&quot;markdown-toc-assembly-methods&quot;&gt;Assembly methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1-assembly&quot; id=&quot;markdown-toc-section-1-assembly&quot;&gt;Section 1: Assembly&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#subsection-assembly-prep&quot; id=&quot;markdown-toc-subsection-assembly-prep&quot;&gt;Subsection: Assembly prep&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-assembly-command&quot; id=&quot;markdown-toc-the-assembly-command&quot;&gt;The Assembly Command&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2-assembly-statistics&quot; id=&quot;markdown-toc-section-2-assembly-statistics&quot;&gt;Section 2: Assembly Statistics&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#interpreting-assembly-statistics&quot; id=&quot;markdown-toc-interpreting-assembly-statistics&quot;&gt;Interpreting assembly statistics&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#getting-assembly-statistics-for-your-sample&quot; id=&quot;markdown-toc-getting-assembly-statistics-for-your-sample&quot;&gt;Getting assembly statistics for your sample&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#questions-for-todays-turn-in&quot; id=&quot;markdown-toc-questions-for-todays-turn-in&quot;&gt;Questions for today’s turn-in:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This week we’re going to be looking at metagenome assembly- what it is, how to do it, and best practices.&lt;/p&gt;

&lt;p&gt;Your samples are enormous (some of the uncompressed .fastq files are &amp;gt;65GB!) so we’re not going to be able to do metagenome assembly on all of these today.&lt;/p&gt;

&lt;p&gt;What we are going to do is an overview of metagenome assembly- what it is, how to run it, and what software to use.&lt;/p&gt;

&lt;p&gt;First, &lt;a href=&quot;https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0169662&quot;&gt;here’s a link&lt;/a&gt; to a nice paper by Vollmers et al. that describes the most popular software packages for metagenome assembly. It’ll be a nice resource for you in the future if you encounter this again.&lt;/p&gt;

&lt;p&gt;Second, let’s go over the methods we use in our lab and why we use them.&lt;/p&gt;

&lt;h1 id=&quot;assembly-methods&quot;&gt;Assembly methods&lt;/h1&gt;

&lt;p&gt;Our lab uses &lt;code class=&quot;highlighter-rouge&quot;&gt;idba_ud&lt;/code&gt;, as we tend to get the best results with it (and it has a nice built-in scaffolder).
This is by no means a one-size-fits-all solution; different assemblers work to different degrees depending on the type of sample you’re working with, its environment of origin, and your sequencing depth.&lt;/p&gt;

&lt;p&gt;For a nice example, see the image below from the paper mentioned above:&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”https://journals.plos.org/plosone/article/figure/image?size=large&amp;amp;id=info:doi/10.1371/journal.pone.0169662.g002” width=250&amp;gt;&lt;/p&gt;

&lt;p&gt;As you can see, different assemblers win out over others when looking at particular metrics, but none is consistently better than all the others based on all metrics across different sample types.
It’s up to you to decide which one is best for your particular situation, based on the particular traits of each assembler (which are well described in the Vollmers et al. paper above).&lt;/p&gt;

&lt;p&gt;We can see the effect of using different assemblers on our data, too. I ran &lt;code class=&quot;highlighter-rouge&quot;&gt;megahit&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;metaSPAdes&lt;/code&gt; for one of our class samples, &lt;code class=&quot;highlighter-rouge&quot;&gt;JS_HA1_S133&lt;/code&gt;. Here’s what the stats look like in comparison:&lt;/p&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Assembly Statistic&lt;/th&gt;
      &lt;th&gt;MEGAHIT&lt;/th&gt;
      &lt;th&gt;metaSPAdes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;# Contigs&lt;/td&gt;
      &lt;td&gt;679859&lt;/td&gt;
      &lt;td&gt;2448126&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;N50&lt;/td&gt;
      &lt;td&gt;1231 bp&lt;/td&gt;
      &lt;td&gt;578 bp&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Average Sequence Length&lt;/td&gt;
      &lt;td&gt;901.35 bp&lt;/td&gt;
      &lt;td&gt;453.59 bp&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Largest Contig&lt;/td&gt;
      &lt;td&gt;429190&lt;/td&gt;
      &lt;td&gt;502671&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;Our lab uses either &lt;code class=&quot;highlighter-rouge&quot;&gt;metaSPAdes&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;idba_ud&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;MEGAHIT&lt;/code&gt;; today we’ll be using &lt;code class=&quot;highlighter-rouge&quot;&gt;metaSPAdes&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section-1-assembly&quot;&gt;Section 1: Assembly&lt;/h1&gt;

&lt;p&gt;First, we’re going to set up a practice assembly. Navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;/class_data/example_assembly&lt;/code&gt; and take a look at what’s there. You’ll see two files:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jwestrob@class:/class_data/example_assembly$ ls

JS_WN1_S130_example.trimmed.1.fastq  JS_WN1_S130_example.trimmed.2.fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we have a subset of both the forward and reverse reads from the sample &lt;code class=&quot;highlighter-rouge&quot;&gt;JS_WN1_S130&lt;/code&gt;, which none of the groups have been assigned. Here we have 500,000&lt;/p&gt;

&lt;h2 id=&quot;subsection-assembly-prep&quot;&gt;Subsection: Assembly prep&lt;/h2&gt;

&lt;p&gt;Now we’re going to prepare to run an assembly. Choose your reads, and do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ln -s /class_data/example_assembly/*.fastq ~&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will create what’s called a &lt;em&gt;symbolic link&lt;/em&gt; in your home directory (your home directory is symbolized by &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;) - it’s like copying over a file, but you don’t actually make a new copy. You can just see the filename and operate on it as if you had copied it. If you remove this link, the original will be safe and sound in its original directory.&lt;/p&gt;

&lt;h2 id=&quot;the-assembly-command&quot;&gt;The Assembly Command&lt;/h2&gt;

&lt;p&gt;Now, we’re going to do actual assembly. Remember, &lt;strong&gt;only one person per group should execute one of the following commands! We only have so many compute resources.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#This navigates to your home directory
cd ~
#This displays the help for metaspades
metaspades.py -h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Take a look at some of these options.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SPAdes genome assembler v3.15.0 [metaSPAdes mode]

Usage: spades.py [options] -o &amp;lt;output_dir&amp;gt;

Basic options:
  -o &amp;lt;output_dir&amp;gt;             directory to store all the resulting files (required)
  --iontorrent                this flag is required for IonTorrent data
  --test                      runs SPAdes on toy dataset
  -h, --help                  prints this usage message
  -v, --version               prints version

Input data:
  --12 &amp;lt;filename&amp;gt;             file with interlaced forward and reverse paired-end reads
  -1 &amp;lt;filename&amp;gt;               file with forward paired-end reads
  -2 &amp;lt;filename&amp;gt;               file with reverse paired-end reads
  -s &amp;lt;filename&amp;gt;               file with unpaired reads
  --merged &amp;lt;filename&amp;gt;         file with merged forward and reverse paired-end reads
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So you’re going to need at least two things to run metaSPAdes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reads to assemble (your &lt;code class=&quot;highlighter-rouge&quot;&gt;fastq&lt;/code&gt; files)&lt;/li&gt;
  &lt;li&gt;The name of an output directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s how that command should look:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;metaspades.py -t 4 -1 [forward reads] -2 [reverse reads] -o [output_directory name]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s run through these options one by one.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt; : The number of threads (separate processes) allotted to the program.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt; : The file containing the forward reads.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-2&lt;/code&gt; : The file containing the reverse reads.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt; : The name of the directory to output your assembly to. I suggest &lt;code class=&quot;highlighter-rouge&quot;&gt;metaspades_out&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the standard parameters, assembling the example reads with 4 threads took about 2.5 minutes. Similar assemblies take ~4 minutes for &lt;code class=&quot;highlighter-rouge&quot;&gt;MEGAHIT&lt;/code&gt; and ~15 for &lt;code class=&quot;highlighter-rouge&quot;&gt;idba_ud&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please do not run this with more than 4 threads!&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section-2-assembly-statistics&quot;&gt;Section 2: Assembly Statistics&lt;/h1&gt;

&lt;p&gt;We’re going to use a script called &lt;code class=&quot;highlighter-rouge&quot;&gt;contig_stats.pl&lt;/code&gt;, written in perl, to generate assembly statistics.&lt;/p&gt;

&lt;p&gt;Navigate to your metaspades output directory (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;cd metaspades_out&lt;/code&gt;), and take a look at the files metaspades generated. Here’s an example output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jwestrob@class:/class_data/example_assembly/metaspades_out$ ls

assembly_graph_after_simplification.gfa  corrected               K55             run_spades.yaml
assembly_graph.fastg                     dataset.info            misc            scaffolds.fasta
assembly_graph_with_scaffolds.gfa        first_pe_contigs.fasta  params.txt      scaffolds.paths
before_rr.fasta                          input_dataset.yaml      pipeline_state  spades.log
contigs.fasta                            K21                     quast_out       strain_graph.gfa
contigs.paths                            K33                     run_spades.sh   tmp

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You’ll notice a lot of different unfamiliar files, but two that should hopefully stand out: &lt;code class=&quot;highlighter-rouge&quot;&gt;contigs.fasta&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;scaffolds.fasta&lt;/code&gt;. We want &lt;code class=&quot;highlighter-rouge&quot;&gt;scaffolds.fasta&lt;/code&gt; - remember, contigs are stitched together to make scaffolds.&lt;/p&gt;

&lt;p&gt;Let’s run &lt;code class=&quot;highlighter-rouge&quot;&gt;contig_stats.pl&lt;/code&gt; to get a good idea of how well the assembly ran-&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#This command will generate a file called 'scaffolds.fasta.summary.txt'
contig_stats.pl -i scaffolds.fasta -o scaffolds.fasta
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s look now at the resulting contig stats- try &lt;code class=&quot;highlighter-rouge&quot;&gt;less -S scaffolds.fasta.summary.text&lt;/code&gt;. You’ll see something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Length distribution
===================

Range    	# sequences (%)	# bps (%)
0-100:  	190 (0.24%)	14076 (0.04%)
100-500:  	65811 (83.44%)	17993525 (60.05%)
500-1000:  	10091 (12.79%)	6788583 (22.65%)
1000-5000:  	2694 (3.41%)	4317525 (14.4%)
5000-10000:  	70 (0.08%)	459324 (1.53%)
10000-20000:  	11 (0.01%)	144408 (0.48%)
20000-50000:  	3 (0%)	81549 (0.27%)
50000-:     	2 (0%)	163131 (0.54%)

General Information
==================

Total number of sequences: 78872
Total number of bps:       29962121
Average sequence length:   379.88 bps.
N50:                       364 bps
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;interpreting-assembly-statistics&quot;&gt;Interpreting assembly statistics&lt;/h2&gt;

&lt;p&gt;Important stats to remember are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;N50 (Median contig size; half of contigs are above this size, half below)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Average sequence length&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Total number of sequences (you want fewer, larger contigs!)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Number of large (50,000+ bp) contigs&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-assembly-statistics-for-your-sample&quot;&gt;Getting assembly statistics for your sample&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Take a look at the directory for your sample (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;/class_data/assemblies/JS_HA1_S131&lt;/code&gt; or similar). &lt;em&gt;If you don’t remember your sample ID ask me for help!&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using the procedure above, generate contig stats for your scaffold file (&lt;code class=&quot;highlighter-rouge&quot;&gt;[samplename]_scaffold.fa&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;questions-for-todays-turn-in&quot;&gt;Questions for today’s turn-in:&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;What is the N50 of the contigs (&lt;em&gt;not&lt;/em&gt; the scaffolds) from the example assembly? (Go back and repeat the procedure to run &lt;code class=&quot;highlighter-rouge&quot;&gt;contig_stats.pl&lt;/code&gt; on the scaffolds from the example assembly, but choose &lt;code class=&quot;highlighter-rouge&quot;&gt;contigs.fasta&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;scaffolds.fasta&lt;/code&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What differentiates contigs from scaffolds? Should an assembly yield more scaffolds than contigs, or vice versa?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the length of the largest contig in your sample’s assembly?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;You did it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i1.wp.com/i.imgflip.com/v80vq.jpg?resize=640%2C359&amp;amp;ssl=1&quot; alt=&quot;You get a genome!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(PC: https://www.molecularecologist.com/2015/12/post-holiday-gift-ideas-a-draft-genome/)&lt;/p&gt;</content><category term="test" /><summary type="html">Metagenomic Assembly!</summary></entry><entry><title type="html">Week 2 Walkthrough- Read Quality and Trimming</title><link href="//Week_2_walkthrough/" rel="alternate" type="text/html" title="Week 2 Walkthrough- Read Quality and Trimming" /><published>2020-02-29T00:00:00-07:00</published><updated>2020-02-29T00:00:00-07:00</updated><id>//Week_2_walkthrough</id><content type="html" xml:base="//Week_2_walkthrough/">&lt;h1&gt;Hello and welcome to week 2 of ESPM 112L-&lt;/h1&gt;

&lt;h1&gt;Metagenomic Data Analysis Lab!&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#tasks-for-today&quot; id=&quot;markdown-toc-tasks-for-today&quot;&gt;Tasks for Today&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-getting-connected-once-again&quot; id=&quot;markdown-toc-1-getting-connected-once-again&quot;&gt;1. Getting Connected Once Again&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-getting-your-reads&quot; id=&quot;markdown-toc-2-getting-your-reads&quot;&gt;2. Getting your reads&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running-fastqc&quot; id=&quot;markdown-toc-running-fastqc&quot;&gt;Running FastQC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-download-files-from-the-cluster-important&quot; id=&quot;markdown-toc-how-to-download-files-from-the-cluster-important&quot;&gt;How to Download Files From The Cluster (IMPORTANT)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#trimming-with-sickle&quot; id=&quot;markdown-toc-trimming-with-sickle&quot;&gt;Trimming with Sickle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#final-step-fastqc-on-the-trimmed-reads&quot; id=&quot;markdown-toc-final-step-fastqc-on-the-trimmed-reads&quot;&gt;Final step: FastQC on the trimmed reads&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#questions&quot; id=&quot;markdown-toc-questions&quot;&gt;Questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tasks-for-today&quot;&gt;Tasks for Today&lt;/h3&gt;

&lt;p&gt;Lab today will hopefully be easy on the technical front, and more about interpreting raw sequence data (what you receive back from a sequencing facility after sending them your extracted DNA).&lt;/p&gt;

&lt;p&gt;To get your points for the day, please provide the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The HTML output of FastQC run before and after trimming&lt;/li&gt;
  &lt;li&gt;Answers to questions (located at the end of the walkthrough)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-getting-connected-once-again&quot;&gt;1. Getting Connected Once Again&lt;/h3&gt;

&lt;p&gt;Time to get back onto the class server! Working locally won’t work for today’s lab since we need to use data that’s stored on the class server.&lt;/p&gt;

&lt;p&gt;Get your student ID number and password out, and connect to the cluster however you did last week:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh studentX@class.ggkbase.berkeley.edu&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Each group will be assigned a sample today, and starting this week you’ll work with that sample. These samples are big, though, and so we’re going to have to take a couple precautions to avoid copying them and using up a ton of disk space!&lt;/p&gt;

&lt;h3 id=&quot;2-getting-your-reads&quot;&gt;2. Getting your reads&lt;/h3&gt;

&lt;p&gt;Make a folder in your home directory (use the &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir&lt;/code&gt; command) called &lt;code class=&quot;highlighter-rouge&quot;&gt;raw.d&lt;/code&gt;. This is how we designate the folders containing our raw sequencing data in the Banfield lab standard workflow. Then &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into that directory. Now let’s fetch your sequence files.&lt;/p&gt;

&lt;p&gt;The reads are located at &lt;code class=&quot;highlighter-rouge&quot;&gt;/class_data/reads/&lt;/code&gt;. I’ve sent out the full path to your reads for each group on Slack. Because these are large files, we can’t just copy them over to all your home directories- that would instantly use tons of disk space! Instead we’re going to make what are called ‘symbolic links’ of your read files. They look, act and are identical in every way to the original files; luckily, though, they don’t take up any space on the hard drive! They’ll show up as light blue instead of white like other normal files.&lt;/p&gt;

&lt;p&gt;Here’s how you make a symbolic link to your reads- remember you’ll need to do this for both your forward and reverse reads.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ln -s [EXAMPLE FILENAME] .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This creates a link - you can modify the file as normal, but it won’t take up any extra disk space and will let you modify it without providing the full PATH. Otherwise, you’d have to type &lt;code class=&quot;highlighter-rouge&quot;&gt;/class_data/reads/[SAMPLE NAME]/&lt;/code&gt; every time you wanted to access your files. (Which you can still do! I guess. Live your best life.)&lt;/p&gt;

&lt;p&gt;Here I’ll use an example set of reads. Make sure to use your own set of reads which I provided to your group on Slack. Here’s an example of what to do:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~
mkdir raw.d
cd raw.d
#Remember to use your own reads instead of these example files!
ln -s /class_data/reads/JS_WN1_S130/JS_WN1_S130.1.fastq.gz .
ln -s /class_data/reads/JS_WN1_S130/JS_WN1_S130.2.fastq.gz .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that you’ve got the data loaded, let’s run our QC program, fastqc! I highly recommend one person per group do this, since it can take quite a while; this way you can get started on the rest of the lab while it’s running. ()&lt;/p&gt;

&lt;h3 id=&quot;running-fastqc&quot;&gt;Running FastQC&lt;/h3&gt;

&lt;p&gt;FastQC is a program to assess the quality of raw sequencing reads. We’re going to use this before and after trimming your reads to highlight the difference trimming makes.&lt;/p&gt;

&lt;p&gt;FastQC is loaded already onto the cluster, so you all have access. Try running the help menu with &lt;code class=&quot;highlighter-rouge&quot;&gt;fastqc -h&lt;/code&gt;. The output should look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FastQC - A high throughput sequence QC analysis tool

SYNOPSIS

fastqc seqfile1 seqfile2 .. seqfileN

fastqc [-o output dir] [--(no)extract] [-f fastq|bam|sam]
[-c contaminant file] seqfile1 .. seqfileN

DESCRIPTION

FastQC reads a set of sequence files and produces from each one a quality
control report consisting of a number of different modules, each one of
which will help to identify a different potential type of problem in your
data.

If no files to process are specified on the command line then the program
will start as an interactive graphical application.  If files are provided
on the command line then the program will run with no user interaction
required.  In this mode it is suitable for inclusion into a standardised
analysis pipeline.

The options for the program as as follows:

-h --help       Print this help file and exit

-v --version    Print the version of the program and exit

-o --outdir     Create all output files in the specified output directory.
        Please note that this directory must exist as the program
        will not create it.  If this option is not set then the
        output file for each sequence file is created in the same
        directory as the sequence file which was processed.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Read the help menu carefully. FastQC will analyze both your forward and reverse reads at once, so make sure to provide them both!&lt;/p&gt;

&lt;p&gt;You have the option of putting the output in a directory (by providing a value for the &lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt; flag), which is tidy, or just having FastQC output everything in your current directory. I recommend making a directory to put the output in, like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir fastQC_output
fastqc -o fastQC_output [forward_reads] [reverse_reads]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This took about 15 minutes running it on the data I use for my research- I would say you should expect it to take about as long on your samples.&lt;/p&gt;

&lt;p&gt;Once this is done, you’re going to have an output .html file (either in your current directory or in the output directory you specified with &lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt;). We’re going to want to download it! This file is an .html file, so you want to open it in a web browser- Firefox, Chrome, Safari, Internet Explorer 6, Netscape, whatever you want.&lt;/p&gt;

&lt;h3 id=&quot;how-to-download-files-from-the-cluster-important&quot;&gt;How to Download Files From The Cluster (IMPORTANT)&lt;/h3&gt;

&lt;p&gt;This is a very important skill, and one that will come up many times throughout the semester. Historically, it’s been a bit tricky, so I want to devote some time to it.&lt;/p&gt;

&lt;p&gt;You have two options. The easiest of these by far if you’re on Mac or Windows is to use &lt;a href=&quot;https://cyberduck.io/&quot;&gt;Cyberduck&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download using a GUI program like &lt;a href=&quot;https://winscp.net/eng/download.php&quot;&gt;WinSCP&lt;/a&gt; for Windows, &lt;a href=&quot;https://cyberduck.io/&quot;&gt;Cyberduck&lt;/a&gt; for Windows or Mac OSX, or Filezilla, I guess, if you’re using Linux. (Instructions on how to use Filezilla for this purpose are &lt;a href=&quot;https://stackoverflow.com/questions/299412/is-there-any-winscp-equivalent-for-linux&quot;&gt;here&lt;/a&gt; although I really recommend you just use SCP if you’re on linux.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GUI-based SCP applications are pretty straightforward. If you have questions about them ask me in class or on slack.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Download with SCP. Here’s an example of how to do that (I also will give a demonstration in class):&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Get the full path to the file you want to download and copy it!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   realpath example_fastqc_output.html
   # OUTPUT: /home/jwestrob/fastqc/example_fastqc_output.html
   # Copy that! ^
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Open a terminal on your computer (NOT the class server- you can leave that one open or close it) and navigate to the folder you want to download to.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  cd ~/Downloads/
  scp jwestrob@class.ggkbase.berkeley.edu:/home/jwestrob/fastqc/example_fastqc_output.html .
  # In Bash, &quot;.&quot; just means &quot;here&quot;, i.e. your current location.                            
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;trimming-with-sickle&quot;&gt;Trimming with Sickle&lt;/h3&gt;

&lt;p&gt;Next we’re going to use Sickle to trim your reads with &lt;code class=&quot;highlighter-rouge&quot;&gt;sickle&lt;/code&gt;. Try running &lt;code class=&quot;highlighter-rouge&quot;&gt;sickle pe -h&lt;/code&gt; for help (the &lt;code class=&quot;highlighter-rouge&quot;&gt;pe&lt;/code&gt; stands for &lt;code class=&quot;highlighter-rouge&quot;&gt;paired-end&lt;/code&gt;). This yields the following help information:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;If you have separate files for forward and reverse reads:
Usage: sickle pe [options] -f &amp;lt;paired-end forward fastq file&amp;gt; -r &amp;lt;paired-end reverse fastq file&amp;gt; -t &amp;lt;quality type&amp;gt; -o &amp;lt;trimmed PE forward file&amp;gt; -p &amp;lt;trimmed PE reverse file&amp;gt; -s &amp;lt;trimmed singles file&amp;gt;

If you have one file with interleaved forward and reverse reads:
Usage: sickle pe [options] -c &amp;lt;interleaved input file&amp;gt; -t &amp;lt;quality type&amp;gt; -m &amp;lt;interleaved trimmed paired-end output&amp;gt; -s &amp;lt;trimmed singles file&amp;gt;

If you have one file with interleaved reads as input and you want ONLY one interleaved file as output:
Usage: sickle pe [options] -c &amp;lt;interleaved input file&amp;gt; -t &amp;lt;quality type&amp;gt; -M &amp;lt;interleaved trimmed output&amp;gt;

Options:
Paired-end separated reads
--------------------------
-f, --pe-file1, Input paired-end forward fastq file (Input files must have same number of records)
-r, --pe-file2, Input paired-end reverse fastq file
-o, --output-pe1, Output trimmed forward fastq file
-p, --output-pe2, Output trimmed reverse fastq file. Must use -s option.

Paired-end interleaved reads
----------------------------
-c, --pe-combo, Combined (interleaved) input paired-end fastq
-m, --output-combo, Output combined (interleaved) paired-end fastq file. Must use -s option.
-M, --output-combo-all, Output combined (interleaved) paired-end fastq file with any discarded read written to output file as a single N. Cannot be used with the -s option.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There’s more, but I’ll let you read it on your terminal instead of putting it here.&lt;/p&gt;

&lt;p&gt;So remember, you have your forward and reverse reads, so you’ll be using the first option-&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;If you have separate files for forward and reverse reads:
Usage: sickle pe [options] -f &amp;lt;paired-end forward fastq file&amp;gt; -r &amp;lt;paired-end reverse fastq file&amp;gt; -t &amp;lt;quality type&amp;gt; -o &amp;lt;trimmed PE forward file&amp;gt; -p &amp;lt;trimmed PE reverse file&amp;gt; -s &amp;lt;trimmed singles file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s an example, again using the example dataset. Remember not to copy paste this, because your sample name will be different!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sickle pe -t sanger -f JS_WN1_S130.1.fastq.gz -r JS_WN1_S130.2.fastq.gz -o JS_WN1_S130.trimmed.1.fastq.gz -p JS_WN1_S130.trimmed.2.fastq.gz -s JS_WN1_S130.trimmed.single.fastq.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;-t sanger&lt;/code&gt;; this indicates the way the per-base quality scores are formatted. This should take a couple more minutes. Also, make sure the output filenames (&lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt;) are different than the input filenames, so you don’t accidentally overwrite your files. (If you do, just let me know and I’ll get you the original data back.)&lt;/p&gt;

&lt;p&gt;This step should take about 5 minutes or so. Don’t worry if it goes longer. (Every sample is a different size.)&lt;/p&gt;

&lt;h3 id=&quot;final-step-fastqc-on-the-trimmed-reads&quot;&gt;Final step: FastQC on the trimmed reads&lt;/h3&gt;

&lt;p&gt;So now that you’ve got trimmed reads, we want to get FastQC results that show how much our quality scores have improved. Run FastQC again, this time using only the trimmed reads.&lt;/p&gt;

&lt;p&gt;I recommend making another directory for the trimmed FastQC output, like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir fastQC_trimmed_output
fastqc -o fastQC_trimmed_output [trimmed_forward_reads] [trimmed_reverse_reads] [trimmed_singleton_reads]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note how I included the singleton reads here (i.e., reads without a mate pair). You don’t have to do this, but I recommend it!&lt;/p&gt;

&lt;p&gt;Now, as you did before, download the FastQC output and open it on your computer.&lt;/p&gt;

&lt;h1 id=&quot;questions&quot;&gt;Questions&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Do you see anything worrying in terms of quality scores in your untrimmed reads?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the noticeable differences in the FastQC output between your trimmed and untrimmed reads?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Briefly describe the pros and cons of short read vs. long read sequencing, and a project that would be appropriate (or inappropriate) to use them for.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Based on the average read length and number of reads for one of your samples, answer the following question: What % of the community does a microbe with a 3,000,000 bp genome need to be at in order to be recovered at 10x coverage?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><category term="test" /><summary type="html">Read Trimming and Quality Control!</summary></entry><entry><title type="html">Week 1 Walkthrough- Intro to Bash</title><link href="//Week_1_walkthrough/" rel="alternate" type="text/html" title="Week 1 Walkthrough- Intro to Bash" /><published>2020-02-17T00:00:00-07:00</published><updated>2020-02-17T00:00:00-07:00</updated><id>//Week_1_walkthrough</id><content type="html" xml:base="//Week_1_walkthrough/">&lt;h1&gt;Hello and welcome to week 1 of ESPM 112L-&lt;/h1&gt;

&lt;h1&gt;Metagenomic Data Analysis Lab!&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#tasks-for-today&quot; id=&quot;markdown-toc-tasks-for-today&quot;&gt;Tasks for Today&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-what-is-the-command-line&quot; id=&quot;markdown-toc-1-what-is-the-command-line&quot;&gt;1. What is the command line?&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#interlude-for-those-intimidated-by-the-command-line&quot; id=&quot;markdown-toc-interlude-for-those-intimidated-by-the-command-line&quot;&gt;Interlude: For those intimidated by the command line&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-how-do-i-access-the-command-line&quot; id=&quot;markdown-toc-2-how-do-i-access-the-command-line&quot;&gt;2. How do I access the command line?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-basic-commands&quot; id=&quot;markdown-toc-3-basic-commands&quot;&gt;3. Basic Commands&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#--ls&quot; id=&quot;markdown-toc---ls&quot;&gt;- &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#--cd&quot; id=&quot;markdown-toc---cd&quot;&gt;- &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-connecting-to-the-class-server&quot; id=&quot;markdown-toc-4-connecting-to-the-class-server&quot;&gt;4. Connecting to the class server&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ssh&quot; id=&quot;markdown-toc-ssh&quot;&gt;SSH&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#changing-the-password&quot; id=&quot;markdown-toc-changing-the-password&quot;&gt;Changing the password&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-creating-modifying-and-moving-files--directories&quot; id=&quot;markdown-toc-5-creating-modifying-and-moving-files--directories&quot;&gt;5. Creating, modifying, and moving files &amp;amp; directories&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#--pwd&quot; id=&quot;markdown-toc---pwd&quot;&gt;- &lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#--mkdir&quot; id=&quot;markdown-toc---mkdir&quot;&gt;- &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creating-and-deleting-files&quot; id=&quot;markdown-toc-creating-and-deleting-files&quot;&gt;Creating and deleting files&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#finishing-up&quot; id=&quot;markdown-toc-finishing-up&quot;&gt;Finishing up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This week’s lab is going to be short and sweet, and include lots of links to external resources (for your reference now and after this class is done). There’s a lot of writing here, but there’s not too much actual work involved yet. That will come, don’t worry!&lt;/p&gt;

&lt;p&gt;Using the terminal (also called the command line) is crucial for bioinformatics, among many other things, and this lab will lay the foundation for you to become proficient in using tools on the terminal. Before we get into how to access it on various operating systems, let’s discuss what it actually is.&lt;/p&gt;

&lt;h3 id=&quot;tasks-for-today&quot;&gt;Tasks for Today&lt;/h3&gt;

&lt;p&gt;To get your points for lab today, you’re going to have to register for an account on the class server, join a group, and send me your username/password combo as well as the names of your group members. Additionally, you’re going to make a directory and a few files as part of the tutorial - you’re going to send me the path to this folder as well. (More on that in a bit.)&lt;/p&gt;

&lt;h3 id=&quot;1-what-is-the-command-line&quot;&gt;1. What is the command line?&lt;/h3&gt;

&lt;p&gt;The command line is an interface designed for you to navigate directories and view files on a computer. This is also called the terminal; it looks like this.&lt;/p&gt;

&lt;figure&gt;
    
    &lt;a href=&quot;https://1.bp.blogspot.com/-y_Qcr6C4aTQ/UB5xcCxM3ZI/AAAAAAAABSk/29C-JeH68Nk/s1600/Pretty+Terminal+Mac.png&quot;&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-y_Qcr6C4aTQ/UB5xcCxM3ZI/AAAAAAAABSk/29C-JeH68Nk/s1600/Pretty+Terminal+Mac.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;Example Terminal with Color Formatting&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In the above example, you can see multiple types of commands, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;. These are programs, included by default with unix systems such as Linux or Mac OSX. These programs are included as part of something known as a &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt;; in Unix distributions (and when downloaded on Windows) this shell is named &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt;, and on Mac OSX this is generally &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh&lt;/code&gt;. (The difference between the two is unimportant for our purposes right now.) I’ll refer to the shell as &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; from here on out.&lt;/p&gt;

&lt;p&gt;The majority of the tools we will use in this course are operated from the command line, just like these. In essence, what you’ll be doing is navigating around a file system just like you might on your own computer using Windows explorer or the Mac OSX finder. This method has several advantages, though, because of all the programs you’ll have access to which are best used on the command line.&lt;/p&gt;

&lt;h4 id=&quot;interlude-for-those-intimidated-by-the-command-line&quot;&gt;Interlude: For those intimidated by the command line&lt;/h4&gt;

&lt;p&gt;There are certainly ways around using the command line for most applications. We will go over alternatives at every step of the way where possible, and if you find a good alternative to the command line for a particular task, feel free to use it! I and many other bioinformaticians feel most comfortable on the command line, and I feel it’s a valuable tool. But don’t stress out about it! You don’t need to use it for everything.&lt;/p&gt;

&lt;p&gt;Keep in mind also that I will provide specific examples on how to do most everything you’ll need to do on the command line for this course. And don’t panic if you run into errors- it’s a natural part of the process of working with these types of systems and data. It builds character, as they say.&lt;/p&gt;

&lt;h3 id=&quot;2-how-do-i-access-the-command-line&quot;&gt;2. How do I access the command line?&lt;/h3&gt;

&lt;p&gt;This will differ based on the operating system you’re using. Let’s divide this up into three categories.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Linux (includes Chrome OS)&lt;/p&gt;

    &lt;p&gt;Press &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Alt+t&lt;/code&gt; to open a terminal. Congratulations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mac OSX&lt;/p&gt;

    &lt;p&gt;Click on the Spotlight Search icon (magnifying glass) at the top right corner of your screen. Search ‘terminal’, and open the application. I recommend pinning this to your dock/taskbar; you’ll be using it a fair bit.
Detailed instructions &lt;a href=&quot;https://www.howtogeek.com/682770/how-to-open-the-terminal-on-a-mac/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Windows&lt;/p&gt;

    &lt;p&gt;Go to the &lt;a href=&quot;https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab&quot;&gt;Windows store&lt;/a&gt; and download Windows Terminal.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have trouble getting this working, let me know. It should be a fairly painless process in most instances, though, now that Windows has its own terminal! (That’s relatively new.)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;3-basic-commands&quot;&gt;3. Basic Commands&lt;/h2&gt;

&lt;p&gt;First we’re going to want to do the things you’re used to doing in normal file explorers like OSX Finder or Windows Explorer.&lt;/p&gt;

&lt;p&gt;The two most important commands are the ones you can see used in the example picture above: &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;--ls&quot;&gt;- &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; is fundamental and super important. Short for the word ‘list’ (&lt;a href=&quot;https://en.wikipedia.org/wiki/Ls#History&quot;&gt;proof&lt;/a&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; shows you the contents of a directory. Try it out!&lt;/p&gt;

&lt;figure&gt;
    
    &lt;a href=&quot;https://i.stack.imgur.com/k4EBH.png&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/k4EBH.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;Example usage of ls that I grabbed from google&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Advanced usage (not necessary, just fun)&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; has many options that can change what it shows you and how that data is displayed. My favorite is &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -thora&lt;/code&gt;, which will show all the files in your current directory including hidden files, sort by date modified, and present it to you in a different format than standard &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;. Try it! For a full list of options, see the &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; manual page by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;man ls&lt;/code&gt; and pressing enter.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;--cd&quot;&gt;- &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; is probably the most common command you’ll use, and the easiest (in my opinion) to remember. &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; stands for ‘change directory’. It just moves you from one folder to the next, exactly like clicking on a folder in a file explorer.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; has the advantage of being able to navigate anywhere in one command if you give the full location of a directory; the most analogous function is in Windows explorer when you paste the location of a file in the top navigation bar. (If there is one on OSX let me know, I don’t use that.) Let’s wait a little bit to try that one out.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;4-connecting-to-the-class-server&quot;&gt;4. Connecting to the class server&lt;/h2&gt;

&lt;p&gt;The class server is a computer we’re using to host your data and perform computational tasks this semester. Each of you will register for an account today, and learn how to access it. Physically, it exists just off campus in the UC Berkeley data center on Hearst; luckily for you, we can access it from anywhere. Let’s go over how.&lt;/p&gt;

&lt;h4 id=&quot;ssh&quot;&gt;SSH&lt;/h4&gt;

&lt;p&gt;SSH stands for ‘Secure Shell’. Remember how the terminal is also called a shell? We’re just going to be connecting to a new terminal session on the class server over the internet. This is one of two most important commands to remember for this class, so write it down somewhere and remember you can always come back here to see it again.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh username@class.ggkbase.berkeley.edu&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Pretty simple! I will be giving out usernames in class, as well as telling you the default password. (Information security 101: Don’t give away passwords willy-nilly.) Once you’ve connected successfully, you’re going to need to change that default password.&lt;/p&gt;

&lt;h4 id=&quot;changing-the-password&quot;&gt;Changing the password&lt;/h4&gt;

&lt;p&gt;The command to change your password is &lt;code class=&quot;highlighter-rouge&quot;&gt;passwd&lt;/code&gt;. Type this, and you will see a prompt asking for your current password. Enter it, then enter the new password- then you’re done!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;5-creating-modifying-and-moving-files--directories&quot;&gt;5. Creating, modifying, and moving files &amp;amp; directories&lt;/h2&gt;

&lt;p&gt;Alright, now to take your fancy new terminal for a spin.&lt;/p&gt;

&lt;p&gt;When you SSH into the class server, you’re automatically going to be in your home directory (&lt;code class=&quot;highlighter-rouge&quot;&gt;/home/studentX&lt;/code&gt;, where X is your ID number). This is your personal workspace, for storing important files and doing whatever else you might need to do for the course. To see the full path, type the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;--pwd&quot;&gt;- &lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt; stands for &lt;strong&gt;p&lt;/strong&gt;rint &lt;strong&gt;w&lt;/strong&gt;orking &lt;strong&gt;d&lt;/strong&gt;irectory. It gives you the name of the folder you’re currently at, which is useful for moving files around and navigating quickly. The location of files and directories on the terminal is called the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Next, let’s make a directory that we’ll work in for today. Call it whatever you like- if you’re not feeling creative, call it ‘tutorial’ or ‘sandbox’ or what have you. You can create a directory with the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir tutorial&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;--mkdir&quot;&gt;- &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir&lt;/code&gt; stands for, as you might have inferred, ‘make directory’. Pretty straightforward. You have to provide a name for this directory, though- ex.  &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir tutorial&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now we’re going to navigate into this folder- remember our old friend &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;? Try it now-&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd tutorial&lt;/code&gt; (or whatever you named it)&lt;/p&gt;

&lt;p&gt;Now that you’re here (welcome!) let’s try creating a file. It’ll be empty at first, but that’s okay. You can create files in bash like so:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;filename&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;creating-and-deleting-files&quot;&gt;Creating and deleting files&lt;/h4&gt;

&lt;p&gt;Creating files is easy- just use the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; character, followed by the name of the file you’d like to create. (like so: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; test.file&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;test.file&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;This file will be empty unless you’re putting something in it. Also, if there’s a file with the same name as the one you’re trying to create, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; will overwrite that file- be careful!&lt;/p&gt;

&lt;p&gt;Removing files is also pretty simple, although removing directories is not (for good reason). To remove files, use &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt;, like so:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rm test.file&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;finishing-up&quot;&gt;Finishing up&lt;/h2&gt;

&lt;p&gt;Now, to finish the tutorial, and your lab for today. Let’s make a file in your directory called ‘hello_world.txt’.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;hello_world.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then we’re going to add some text to it, using only the command line!&lt;/p&gt;

&lt;p&gt;First, try this: &lt;code class=&quot;highlighter-rouge&quot;&gt;echo &quot;I love science&quot;&lt;/code&gt;. See how it prints text to the terminal for you to read? Now we’re going to put that text in a file, using echo and the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; operator. Try this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo &quot;Hello world!&quot; &amp;gt;&amp;gt; hello_world.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; operator will append the output of another program to the end of a file; since your &lt;code class=&quot;highlighter-rouge&quot;&gt;hello_world.txt&lt;/code&gt; is currently empty, “Hello world!” is all that file will consist of.&lt;/p&gt;

&lt;p&gt;Next, you’re going to want to turn in the PATH to your file; to get the PATH of a file (rather than a directory, like &lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt; does), try this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;realpath hello_world.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Send me this, along with your student ID/password combo and your group members’ names, and your lab for today is complete!&lt;/p&gt;</content><category term="test" /><summary type="html">Introducing the Command Line!</summary></entry></feed>
